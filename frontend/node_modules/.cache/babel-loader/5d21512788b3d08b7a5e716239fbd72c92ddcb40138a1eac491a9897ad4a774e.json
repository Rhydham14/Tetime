{"ast":null,"code":"import { pick } from \"@gatsbyjs/reach-router\";\nimport stripPrefix from \"./strip-prefix\";\nimport normalizePagePath from \"./normalize-page-path\";\nimport { maybeGetBrowserRedirect } from \"./redirect-utils.js\";\nconst pathCache = new Map();\nlet matchPaths = [];\nconst trimPathname = rawPathname => {\n  let newRawPathname = rawPathname;\n  const queryIndex = rawPathname.indexOf(`?`);\n  if (queryIndex !== -1) {\n    const [path, qs] = rawPathname.split(`?`);\n    newRawPathname = `${path}?${encodeURIComponent(qs)}`;\n  }\n  const pathname = decodeURIComponent(newRawPathname);\n\n  // Remove the pathPrefix from the pathname.\n  const trimmedPathname = stripPrefix(pathname, decodeURIComponent(__BASE_PATH__))\n  // Remove any hashfragment\n  .split(`#`)[0];\n  return trimmedPathname;\n};\nfunction absolutify(path) {\n  // If it's already absolute, return as-is\n  if (path.startsWith(`/`) || path.startsWith(`https://`) || path.startsWith(`http://`)) {\n    return path;\n  }\n  // Calculate path relative to current location, adding a trailing slash to\n  // match behavior of @reach/router\n  return new URL(path, window.location.href + (window.location.href.endsWith(`/`) ? `` : `/`)).pathname;\n}\n\n/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */\nexport const setMatchPaths = value => {\n  matchPaths = value;\n};\n\n/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */\nexport const findMatchPath = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname);\n  const pickPaths = matchPaths.map(({\n    path,\n    matchPath\n  }) => {\n    return {\n      path: matchPath,\n      originalPath: path\n    };\n  });\n  const path = pick(pickPaths, trimmedPathname);\n  if (path) {\n    return normalizePagePath(path.route.originalPath);\n  }\n  return null;\n};\n\n/**\n * Return a matchpath params from reach/router rules\n * if `match-paths.json` contains `{ \":bar/*foo\" }`, and the path is /baz/zaz/zoo\n * then it returns\n *  { bar: baz, foo: zaz/zoo }\n *\n * @param {string} rawPathname A raw pathname\n * @return {object}\n */\nexport const grabMatchParams = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname);\n  const pickPaths = matchPaths.map(({\n    path,\n    matchPath\n  }) => {\n    return {\n      path: matchPath,\n      originalPath: path\n    };\n  });\n  const path = pick(pickPaths, trimmedPathname);\n  if (path) {\n    return path.params;\n  }\n  return {};\n};\n\n// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n// `/foo?bar=far` => `/page1`\nexport const findPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname));\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname);\n  }\n  const redirect = maybeGetBrowserRedirect(rawPathname);\n  if (redirect) {\n    return findPath(redirect.toPath);\n  }\n  let foundPath = findMatchPath(trimmedPathname);\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname);\n  }\n  pathCache.set(trimmedPathname, foundPath);\n  return foundPath;\n};\n\n/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */\nexport const cleanPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname));\n  let foundPath = trimmedPathname;\n  if (foundPath === `/index.html`) {\n    foundPath = `/`;\n  }\n  foundPath = normalizePagePath(foundPath);\n  return foundPath;\n};","map":{"version":3,"names":["pick","stripPrefix","normalizePagePath","maybeGetBrowserRedirect","pathCache","Map","matchPaths","trimPathname","rawPathname","newRawPathname","queryIndex","indexOf","path","qs","split","encodeURIComponent","pathname","decodeURIComponent","trimmedPathname","__BASE_PATH__","absolutify","startsWith","URL","window","location","href","endsWith","setMatchPaths","value","findMatchPath","cleanPath","pickPaths","map","matchPath","originalPath","route","grabMatchParams","params","findPath","has","get","redirect","toPath","foundPath","set"],"sources":["/home/rhydham/Documents/Tetime/frontend/node_modules/gatsby/cache-dir/find-path.js"],"sourcesContent":["import { pick } from \"@gatsbyjs/reach-router\"\nimport stripPrefix from \"./strip-prefix\"\nimport normalizePagePath from \"./normalize-page-path\"\nimport { maybeGetBrowserRedirect } from \"./redirect-utils.js\"\n\nconst pathCache = new Map()\nlet matchPaths = []\n\nconst trimPathname = rawPathname => {\n  let newRawPathname = rawPathname\n  const queryIndex = rawPathname.indexOf(`?`)\n\n  if (queryIndex !== -1) {\n    const [path, qs] = rawPathname.split(`?`)\n    newRawPathname = `${path}?${encodeURIComponent(qs)}`\n  }\n\n  const pathname = decodeURIComponent(newRawPathname)\n\n  // Remove the pathPrefix from the pathname.\n  const trimmedPathname = stripPrefix(\n    pathname,\n    decodeURIComponent(__BASE_PATH__)\n  )\n    // Remove any hashfragment\n    .split(`#`)[0]\n\n  return trimmedPathname\n}\n\nfunction absolutify(path) {\n  // If it's already absolute, return as-is\n  if (\n    path.startsWith(`/`) ||\n    path.startsWith(`https://`) ||\n    path.startsWith(`http://`)\n  ) {\n    return path\n  }\n  // Calculate path relative to current location, adding a trailing slash to\n  // match behavior of @reach/router\n  return new URL(\n    path,\n    window.location.href + (window.location.href.endsWith(`/`) ? `` : `/`)\n  ).pathname\n}\n\n/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */\nexport const setMatchPaths = value => {\n  matchPaths = value\n}\n\n/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */\nexport const findMatchPath = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname)\n\n  const pickPaths = matchPaths.map(({ path, matchPath }) => {\n    return {\n      path: matchPath,\n      originalPath: path,\n    }\n  })\n\n  const path = pick(pickPaths, trimmedPathname)\n\n  if (path) {\n    return normalizePagePath(path.route.originalPath)\n  }\n\n  return null\n}\n\n/**\n * Return a matchpath params from reach/router rules\n * if `match-paths.json` contains `{ \":bar/*foo\" }`, and the path is /baz/zaz/zoo\n * then it returns\n *  { bar: baz, foo: zaz/zoo }\n *\n * @param {string} rawPathname A raw pathname\n * @return {object}\n */\nexport const grabMatchParams = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname)\n\n  const pickPaths = matchPaths.map(({ path, matchPath }) => {\n    return {\n      path: matchPath,\n      originalPath: path,\n    }\n  })\n\n  const path = pick(pickPaths, trimmedPathname)\n\n  if (path) {\n    return path.params\n  }\n\n  return {}\n}\n\n// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n// `/foo?bar=far` => `/page1`\nexport const findPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname)\n  }\n\n  const redirect = maybeGetBrowserRedirect(rawPathname)\n  if (redirect) {\n    return findPath(redirect.toPath)\n  }\n\n  let foundPath = findMatchPath(trimmedPathname)\n\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname)\n  }\n\n  pathCache.set(trimmedPathname, foundPath)\n\n  return foundPath\n}\n\n/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */\nexport const cleanPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n\n  let foundPath = trimmedPathname\n  if (foundPath === `/index.html`) {\n    foundPath = `/`\n  }\n\n  foundPath = normalizePagePath(foundPath)\n\n  return foundPath\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}