{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst mongoose = require(\"mongoose\");\nconst Blog = require(\"./models/Blog\"); // Assuming you have a Blog model\n\nconst app = express();\nconst PORT = 4000;\n\n// Connect to MongoDB\nmongoose.connect(\"mongodb://localhost:27017/blogApp\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Configure Multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"uploads/\"); // Specify upload directory\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname); // Use original filename for storage\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Handle POST request to create a new blog\napp.post(\"/api/blogs/writeblog\", upload.single(\"file\"), async (req, res) => {\n  try {\n    const {\n      title,\n      description,\n      user_id\n    } = req.body;\n    const file = req.file;\n    if (!file) {\n      return res.status(400).json({\n        error: \"Image file is missing\"\n      });\n    }\n\n    // Create a new blog document\n    const newBlog = new Blog({\n      title,\n      description,\n      user_id,\n      filename: file.originalname,\n      path: file.path\n    });\n\n    // Save the new blog to MongoDB\n    await newBlog.save();\n    res.status(201).json({\n      message: \"Blog added successfully\",\n      newBlog\n    });\n  } catch (error) {\n    console.error(\"Error creating blog:\", error);\n    res.status(500).json({\n      error: \"Something went wrong\"\n    });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","multer","mongoose","Blog","app","PORT","connect","useNewUrlParser","useUnifiedTopology","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","post","single","res","title","description","user_id","body","status","json","error","newBlog","path","save","message","console","listen","log"],"sources":["/home/rhydham/Documents/Tetime/frontend/src/jsx/NewBlog.js"],"sourcesContent":["const express = require(\"express\");\nconst multer = require(\"multer\");\nconst mongoose = require(\"mongoose\");\nconst Blog = require(\"./models/Blog\"); // Assuming you have a Blog model\n\nconst app = express();\nconst PORT = 4000;\n\n// Connect to MongoDB\nmongoose.connect(\"mongodb://localhost:27017/blogApp\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Configure Multer for file uploads\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"uploads/\"); // Specify upload directory\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname); // Use original filename for storage\n  },\n});\n\nconst upload = multer({ storage: storage });\n\n// Handle POST request to create a new blog\napp.post(\"/api/blogs/writeblog\", upload.single(\"file\"), async (req, res) => {\n  try {\n    const { title, description, user_id } = req.body;\n    const file = req.file;\n\n    if (!file) {\n      return res.status(400).json({ error: \"Image file is missing\" });\n    }\n\n    // Create a new blog document\n    const newBlog = new Blog({\n      title,\n      description,\n      user_id,\n      filename: file.originalname,\n      path: file.path,\n    });\n\n    // Save the new blog to MongoDB\n    await newBlog.save();\n\n    res.status(201).json({ message: \"Blog added successfully\", newBlog });\n  } catch (error) {\n    console.error(\"Error creating blog:\", error);\n    res.status(500).json({ error: \"Something went wrong\" });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMG,IAAI,GAAGH,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;AAEvC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;;AAEjB;AACAH,QAAQ,CAACI,OAAO,CAAC,mCAAmC,EAAE;EACpDC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;;AAEF;AACA,MAAMC,OAAO,GAAGR,MAAM,CAACS,WAAW,CAAC;EACjCC,WAAW,EAAE,SAAAA,CAAUC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACpCA,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;EACxB,CAAC;EACDC,QAAQ,EAAE,SAAAA,CAAUH,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;IACjCA,EAAE,CAAC,IAAI,EAAED,IAAI,CAACG,YAAY,CAAC,CAAC,CAAC;EAC/B;AACF,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAGhB,MAAM,CAAC;EAAEQ,OAAO,EAAEA;AAAQ,CAAC,CAAC;;AAE3C;AACAL,GAAG,CAACc,IAAI,CAAC,sBAAsB,EAAED,MAAM,CAACE,MAAM,CAAC,MAAM,CAAC,EAAE,OAAOP,GAAG,EAAEQ,GAAG,KAAK;EAC1E,IAAI;IACF,MAAM;MAAEC,KAAK;MAAEC,WAAW;MAAEC;IAAQ,CAAC,GAAGX,GAAG,CAACY,IAAI;IAChD,MAAMX,IAAI,GAAGD,GAAG,CAACC,IAAI;IAErB,IAAI,CAACA,IAAI,EAAE;MACT,OAAOO,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAwB,CAAC,CAAC;IACjE;;IAEA;IACA,MAAMC,OAAO,GAAG,IAAIzB,IAAI,CAAC;MACvBkB,KAAK;MACLC,WAAW;MACXC,OAAO;MACPR,QAAQ,EAAEF,IAAI,CAACG,YAAY;MAC3Ba,IAAI,EAAEhB,IAAI,CAACgB;IACb,CAAC,CAAC;;IAEF;IACA,MAAMD,OAAO,CAACE,IAAI,CAAC,CAAC;IAEpBV,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEK,OAAO,EAAE,yBAAyB;MAAEH;IAAQ,CAAC,CAAC;EACvE,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CP,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,KAAK,EAAE;IAAuB,CAAC,CAAC;EACzD;AACF,CAAC,CAAC;;AAEF;AACAvB,GAAG,CAAC6B,MAAM,CAAC5B,IAAI,EAAE,MAAM;EACrB2B,OAAO,CAACE,GAAG,CAAE,6BAA4B7B,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}