{"ast":null,"code":"import axios from\"axios\";const axiosInstance=axios.create({baseURL:\"https://tetime-2.onrender.com\"});// const axiosInstance = axios.create({baseURL: \"http://localhost:8080\"}); \naxiosInstance.interceptors.request.use(async config=>{const token=localStorage.getItem(\"token\");console.log(\"ttttt\",token);const refreshToken=localStorage.getItem(\"refreshToken\");if(token){config.headers.Authorization=\"Bearer \".concat(token);}if(refreshToken){config.headers[\"refresh-token\"]=refreshToken;}console.log(\"Request Interceptor:\",config);return config;},error=>{console.error(\"Request Interceptor Error:\",error);return Promise.reject(error);});axiosInstance.interceptors.response.use(async response=>{console.log(\"Response Interceptor:\",response);console.log(\"Response Headers:\",response.headers);if(response.data.token){const newtoken=response.data.token;// Update the local storage with the new access token\nlocalStorage.setItem(\"token\",newtoken);}return response;},async error=>{console.error(\"Response Interceptor Error:\",error);if(error.response&&error.response.status===419){// Handle 419 error by refreshing the token\ntry{const refreshToken=localStorage.getItem(\"refreshToken\");if(!refreshToken){throw new Error(\"No refresh token available\");}console.log(\"Inside token expiration handler, refreshing token...\");const refreshResponse=await axios.get(\"http://localhost:4000/api/users/refreshToken\",{headers:{\"refresh-token\":refreshToken}});console.log(\"-----------------resrefresh\",refreshResponse);const newtoken=refreshResponse.data.token;console.log(\"hellloooo token\",newtoken);localStorage.setItem(\"token\",newtoken);// Retry the original request with the new access token\nconst originalRequest=error.config;originalRequest.headers.Authorization=\"Bearer \".concat(newtoken);return axiosInstance(originalRequest);}catch(refreshError){console.error(\"Error refreshing access token:\",refreshError);// If the refresh token has expired, dispatch logout action\nif(refreshError.response.status===401&&refreshError.response.data.message===\"Refresh token has expired\")return Promise.reject(error);}}return Promise.reject(error);});export default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","refreshToken","headers","Authorization","concat","error","Promise","reject","response","data","newtoken","setItem","status","Error","refreshResponse","get","originalRequest","refreshError","message"],"sources":["/home/rhydham/Documents/Tetime/frontend/src/Axios/axios.js"],"sourcesContent":["import axios from \"axios\";\nconst axiosInstance = axios.create({baseURL: \"https://tetime-2.onrender.com\"}); \n// const axiosInstance = axios.create({baseURL: \"http://localhost:8080\"}); \n \naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"ttttt\",token);\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    if (refreshToken) {\n      config.headers[\"refresh-token\"] = refreshToken;\n    }\n\n    console.log(\"Request Interceptor:\", config);\n    return config;\n  },\n  (error) => {\n    console.error(\"Request Interceptor Error:\", error);\n    return Promise.reject(error);\n  }\n);\n\naxiosInstance.interceptors.response.use(\n  async (response) => {\n    console.log(\"Response Interceptor:\", response);\n    console.log(\"Response Headers:\", response.headers);\n\n    if (response.data.token) {\n      const newtoken = response.data.token;\n\n      // Update the local storage with the new access token\n      localStorage.setItem(\"token\", newtoken);\n    }\n\n    return response;\n  },\n  async (error) => {\n    console.error(\"Response Interceptor Error:\", error);\n\n    if (error.response && error.response.status === 419) {\n      // Handle 419 error by refreshing the token\n      try {\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n        if (!refreshToken) {\n          throw new Error(\"No refresh token available\");\n        }\n\n        console.log(\"Inside token expiration handler, refreshing token...\");\n        const refreshResponse = await axios.get(\n          `http://localhost:4000/api/users/refreshToken`,\n          {\n            headers: {\n              \"refresh-token\": refreshToken,\n            },\n          }\n        );\n        console.log(\"-----------------resrefresh\", refreshResponse);\n\n        const newtoken = refreshResponse.data.token;\n        console.log(\"hellloooo token\", newtoken);\n        localStorage.setItem(\"token\", newtoken);\n\n        // Retry the original request with the new access token\n        const originalRequest = error.config;\n        originalRequest.headers.Authorization = `Bearer ${newtoken}`;\n        return axiosInstance(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Error refreshing access token:\", refreshError);\n\n        // If the refresh token has expired, dispatch logout action\n        if (\n          refreshError.response.status === 401 &&\n          refreshError.response.data.message === \"Refresh token has expired\"\n        )\n        \n        return Promise.reject(error);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n\n\n \nexport default axiosInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}